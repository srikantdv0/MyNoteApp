@using Microsoft.JSInterop;
@using NotesShared.Models;
@inject IJSRuntime _jsr;
@inject StateContainer stateContainer;
@inject NavigationManager navigationManager;
@implements IDisposable;
<p>
    @if (!string.IsNullOrEmpty(username))
    {
        <div class="dropdown pb-4">
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                    @if (profilePic != null)
                    {
                        <img src="data:@profilePic.ContentType;base64,@profilePic.Base64data" alt="hugenerd" width="30" height="30" class="rounded-circle">
                        <span style="padding-left:.5rem">@username</span>
                    }
                    else
                    {
                        <span >@username</span>
                    }
            </a>
            <ul class="dropdown-menu dropdown-menu-light text-small shadow">
                <li><a class="dropdown-item" href="/userprofile" @onclick="()=>OnNavItemSelection.InvokeAsync()">Profile</a></li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li><a class="dropdown-item" href="/logout">Sign out</a></li>
            </ul>
        </div>

    }
    else
    {
        <a href="/login">Sign In</a>
    }

</p>


@code {

    [Parameter]
    public EventCallback OnNavItemSelection { get; set; }

    string username = string.Empty;

    private List<NoteMetadata>? noteMetadata;
    private ImageFile? profilePic;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        stateContainer.metaDataEvent += OnNoteMetaDataEventHandler;
        stateContainer.userLoginEvent += OnUserLoginEventHandler;
        stateContainer.userLogoutEvent += OnUserLogoutEventHandler;
        stateContainer.profilePicEvent += OnProfilePicEventHandler;


        await stateContainer.GetNoteMetaData();

        var userdata = await _jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            username = userdata.Split(';', 2)[0];
        }



    }


    private void OnProfilePicEventHandler(object? sender, ImageFile? profilePic)
    {
        if (profilePic != null)
        {
            this.profilePic = profilePic;
        }
        else
        {
            this.profilePic = null;
        }
        StateHasChanged();
    }

    private void OnNoteMetaDataEventHandler(object? sender, IEnumerable<NoteMetadata>? noteMetadata)
    {
        if (noteMetadata != null)
        {
            this.noteMetadata = noteMetadata.ToList();

        }
        else
        {
            this.noteMetadata = null;
        }
        StateHasChanged();
    }

    private async void OnUserLoginEventHandler(object? sender, EventArgs eventArgs)
    {
        var userdata = await _jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            username = userdata.Split(';', 2)[0];
        }
        StateHasChanged();
    }

    private async void OnUserLogoutEventHandler(object? sender, EventArgs eventArgs)
    {
        username = String.Empty;
        await stateContainer.GetNoteMetaData();
        await stateContainer.GetSharedNoteMetaData();
        StateHasChanged();
    }

    public void Dispose()
    {
        stateContainer.metaDataEvent -= OnNoteMetaDataEventHandler;
        stateContainer.userLoginEvent -= OnUserLoginEventHandler;
        stateContainer.userLogoutEvent -= OnUserLogoutEventHandler;
    }
    }